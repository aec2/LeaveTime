Thanks for clarifying 👍 If your Test Connection is returning undefined even when you enter valid credentials, it usually means the function isn’t returning a clear true/false value but instead hitting an error path that doesn’t propagate properly.

Here’s how you can fix it:


---

1. Add Explicit Return in testConnection

Right now, the function may return undefined when the catch block doesn’t return a value. Update it like this:

const { NtlmClient } = require("axios-ntlm");

async testConnection() {
  try {
    const client = NtlmClient({
      username: this.config.username,
      password: this.config.password,
      domain: this.config.domain || "",
    });

    const url = `${this.config.serverUrl}/ReportServer`;
    const response = await client.get(url);

    if (response && response.status === 200) {
      return { ok: true, status: response.status };
    } else {
      return { ok: false, status: response ? response.status : "No response" };
    }

  } catch (err) {
    console.error("NTLM connection failed:", err);
    return { ok: false, error: err.message || err.toString() };
  }
}


---

2. Handle Result in UI (index.js)

In your onTestConnectionClick (or wherever you call testConnection):

async function onTestConnectionClick() {
  const config = getSSRSConfigFromUI();
  const result = await ssrsService.testConnection(config);

  if (result.ok) {
    alert("Connected successfully! Status: " + result.status);
  } else {
    alert("Connection failed: " + (result.error || result.status));
  }
}


---

3. Why You Got undefined

If the catch block didn’t return anything, JS implicitly returns undefined.

In your old code, you just had return false; in some paths but not all.

With the revised version above, you’ll always get a structured result ({ok: true/false, status/error}) instead of undefined.



---

👉 Do you want me to show you the exact before vs after diff for your testConnection so you can copy-paste directly into your ssrs-service.js without missing a spot?

